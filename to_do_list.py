# -*- coding: utf-8 -*-
"""To-Do list .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VAYVnyfhl-qIKM1dRFXtjkSc4RHC_M3t
"""

#For adding task in task.txt
def add_task():
  try:
    # Taking the input from user
      task_id:str=input("Enter task id:").strip()
      if task_id == "":
          print("Task ID cannot be empty")
          main()
          #return
      else:
          with open('tasks.txt') as f:
            lines=f.readlines()
            for line in lines :
              if task_id==line.strip():
                print(f"Can Not use {task_id} it already exists.\n ")
                main()
                #break
      task_description:str=input("Enter task description:").strip()

      due_date:str=input("Enter deadline (YYYY-MM-DD):").strip()
      # Extract the month and day from the due_date string
      if due_date == "":
          print("Due date cannot be empty")
          main()
          #return
      month = int(due_date[5:7])
      day = int(due_date[8:10])  # Fix indexing for the day

      # Validate the month
      if month < 1 or month > 12:
          print("Invalid month")
          main()
          #return
      elif month in [1, 3, 5, 7, 8, 10, 12]:  # Months with 31 days
          if day < 1 or day > 31:
              print("Invalid day for the given month")
              main()
              #return
      elif month in [4, 6, 9, 11]:  # Months with 30 days
          if day < 1 or day > 30:
              print("Invalid day for the given month")
              main()
              #return
      elif month == 2:  # February
          # Check for leap year (based on year)
          year = int(due_date[:4])  # Extract the year
          if (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):  # Leap year
              if day < 1 or day > 29:
                  print("Invalid day for February in a leap year")
                  main()
                  #return
          else:  # Non-leap year
              if day < 1 or day > 28:
                  print("Invalid day for February in a non-leap year")
                  main()
                  #return

      Status:str="Pending"
      # if file exist than add the data in the file
      with open("tasks.txt",'a') as f:
        data=f"{task_id},{task_description},{due_date},{Status}\n"
        f.write(data)
        print("Task added successfully!")
      main()


  #If file does not exist than create the file and add the data in it
  except FileNotFoundError:
      with open("tasks.txt",'w') as f:
        data=f"{task_id},{task_description},{due_date},{Status}\n"
        f.write(data)
        print("File has been created")
        print("Task added successfully!")

# For reading the Data
def view_tasks():
  try:
    with open("tasks.txt",'r') as f:
      data =f.read()
      if data == "":
           return "No data"
      else:
          return data
  except FileNotFoundError:
    return "File does not Exist!!!"

def edit_task():
  try:
    # Get the task ID to edit
    task_id = input("Enter the Task ID to edit: ").strip()

    # Read all lines from the file
    with open('tasks.txt', 'r') as f:
        lines = f.readlines()

    # Initialize a flag to track whether the task was found
    task_found = False

    # Process each line
    for i in range(len(lines)):
        if lines[i].startswith(task_id + ","):
            task_found = True
            # Split the line into fields
            fields = lines[i].strip().split(',')

            print("1. Edit task description")
            print("2. Edit task due date")
            print("3. Edit task status")
            print("4. Edit entire task")
            print("5. Exit")

            # strip is use to remove the space from both side
            choice = input("Enter your choice (1-5): ").strip()
            match choice:
                case "1":
                    print("Edit task description")
                    fields[1] = input("Enter new task description: ").strip()
                case "2":
                    print("Edit task due date")
                    fields[2] = input("Enter new due date (YYYY-MM-DD): ").strip()
                case "3":
                    print("Edit task status")
                    fields[3] = input("Enter new status (e.g., Completed, Pending): ").strip()
                case "4":
                    print("Edit entire task")
                    fields[1] = input("Enter new task description: ").strip()
                    fields[2] = input("Enter new due date (YYYY-MM-DD): ").strip()
                    fields[3] = input("Enter new status (e.g., Completed, Pending): ").strip()
                case "5":
                    print("Exiting without making changes...")
                    break
                case _:
                    print("Invalid choice. No changes made.")
                    break

            # Reconstruct the updated line and update the lines list
            lines[i] = ", ".join(fields) + "\n"
            break

    # Check if the task was found and update the file
    if task_found:
        with open('tasks.txt', 'w') as f:
            f.writelines(lines)
        print(f"Task ID '{task_id}' has been successfully updated.")
        edit_task()
        main()
    else:
        print(f"Task ID '{task_id}' not found in the file.")

  except FileNotFoundError:
        print("Error: 'tasks.txt' file not found. Please ensure the file exists.")
        edit_task()
  except Exception as e:
        print(f"An unexpected error occurred: {e}")
        edit_task()

def delete_task()-> None:
    try:
        # Get the task ID to delete
        task_delete = input("Enter the Task ID to delete: ").strip()
        task_found = False  # Flag to check if task exists

        # Open the file in read mode
        with open("tasks.txt", 'r') as f:
            data_ids = f.readlines()

        # Open the file in write mode to overwrite it
        with open("tasks.txt", 'w') as f:
            for data in data_ids:
                # Check if the line starts with the task ID
                if data.startswith(task_delete):
                    task_found = True  # Task found and skipped (deleted)
                else:
                    f.write(data)  # Write back all other tasks

        if task_found:
            print(f"Task ID '{task_delete}' has been successfully deleted.")
        else:
            print(f"Task ID '{task_delete}' was not found in the file.")
    except FileNotFoundError:
        print("File 'tasks.txt' does not exist!")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

import os
def delete_file():
  file_path = 'tasks.txt'
  try:
    os.remove(file_path)
    print(f"File '{file_path}' deleted successfully.")
  except FileNotFoundError:
    print(f"File '{file_path}' not found.")

def main():
  print("Welcome to To-Do List Manager!\n1. Add Task\n2.View Tasks\n3. Edit Task\n4. Delete Task\n5. Delete the file \n6. Exit")
  Case=input("Enter a Number Between 1-6:")

  match Case:
    case "1":
      print("Add Task")
      add_task()
    case "2":
       print("View Tasks")
       print(view_tasks())
    case "3":
       print("Edit Task")
       edit_task()
    case "4":
       print("Delete Task")
       delete_task()
    case "5":
      print("Delete the file")
      delete_file()
    case '6':
       print("Exit")
    case _:
       print("Not a Right Input")

if __name__=="__main__":
  main()